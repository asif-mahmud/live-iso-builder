#!/usr/bin/perl

use strict;
use List::Util qw( first );
use Term::ReadKey qw( GetTerminalSize );
use Cwd qw( getcwd );


my $yesno = [
	1,
	{
		yes => 1,
		y => 1,
		Y => 1,
		no => 0,
		n => 0,
		N => 0
	}
];

my $noyes = [
	0,
	$$yesno[1]
];

my $workdirs = [
	'chroot',
	'image',
	'image/live',
	'image/isolinux'
];

my @xorriso = qw ( 
	xorriso -as mkisofs -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot
	-boot-load-size 4 -boot-info-table -o live.iso image
);

sub intro
{
	if(-e "needed/about")
	{
		open my $fh,'<','needed/about' or die "Could not read Version file.";
		print while(<$fh>);
		print "\n";
		close $fh;
	}
}

sub prompt
{
	my $text = shift;
	my $opt = shift;

	# Build the prompt message
	my $prompt = "$text \("; #prompt text
 	$prompt.="$_/" for(keys %{$$opt[1]}); #prompt options
        $prompt	=~ s#(.*)/#$1\)#s;
	my $found = first{$$opt[1]{$_}==$$opt[0]}(keys %{$$opt[1]});
	$prompt.= "\[default=$found\] ";

	# Prompt
	print $prompt;

	# Return result
	chomp(my $ans = <STDIN>);
	$$opt[1]{$ans} // $$opt[0];
}

sub show_progress
{
	my ($min,$max,$cur,$text) = @_;

	# Fix text
	chomp $text;
	$text = $text // "Progress :";

	# Calculate sizes
	my ($w,undef,undef,undef) = GetTerminalSize();
	my $ratio = $cur/($max-$min);
	my $barsz = $w - length($text) - 7;

	# Show progress
	$|++; # For immediate flushing
	printf "\r%s\[%s%s\] %3d\%",$text,"#"x($barsz*$ratio),"-"x($barsz*(1-$ratio)),100*$ratio;
	$|--;
}

sub create_dir
{
	my $dirs = shift;
	print "Creating \[@$dirs\] dirs ...\n";
	mkdir for (@$dirs);
	print "Directories created.\n";
}

sub sync
{
	# Check fot rsync executable
	die "Could not find rsync. Please install rsync first." 
		unless( -X '/usr/bin/rsync' or 
		   -X '/usr/local/bin/rsync' or 
		   -X '/bin/rsync' );
	
	# Construct exclude list
	my $excludes = " --exclude=needed/chroot/README.md";
	my $d = getcwd();
	$d =~ s#(.*)/#$1#s;
	$excludes .= " --exclude=$d ";
	if (-e 'needed/conf/excludes')
	{
		die "Could not open excludes file." 
			unless open my $fh,'<',"needed/conf/excludes";
		while(<$fh>)
		{
			chomp;
			$excludes .= " --exclude=$_ ";
		}
		close $fh;
	}

	# Directories to be synced
	my @dirs = glob "/*";
	push @dirs,glob("needed/chroot/*") if -e "needed/chroot";

	#make sure user files are in right mode
	`chown -R root:root needed/chroot/*`;
	`chmod -R 0755 needed/chroot/*`;
	
	# Lets sync ...
	my $prog = 0;
	for (@dirs)
	{
		show_progress(0,$#dirs+1,++$prog,"Syncing $_ ...");
	   	`rsync -av --one-file-system -l -q $excludes $_ chroot\n`;
	}
}

sub conf_chroot
{
	print "Mounting temporary filesystem ...\n";
	`mount -R /dev chroot/dev`;
	`mount -t sysfs sysfs chroot/sys`;
	`mount -t proc proc chroot/proc`;

	print "Enter current user name :";
	chomp(my $usr = <STDIN>);
	print "Removing user entry ...\n";
	`chroot chroot /bin/bash -c "userdel -f $usr"`;

	print "Creating live user ...\n";
	`chroot chroot /bin/bash -c "useradd -rUm -s /bin/bash live"`;
	`cp needed/scripts/autolive.exp chroot/`;
	`chroot chroot /bin/bash -c "expect -f /autolive.exp"`;
	`rm -f chroot/autolive.exp`;
	print "User <live> with password <live> created.\n";

	print "Unmounting temporary filesystem ...\n";
	`umount -R chroot/dev`;
	`umount chroot/sys`;
	`umount chroot/proc`;

	print "Updating RAM disk...\n";
	my $pwd = $ENV{'PWD'};
	chdir "$pwd/needed/scripts";
	system "./update_initramfs.sh";
	chdir "$pwd";

	print "Cleaning fstab ...\n";
	`cat /dev/null > chroot/etc/fstab`;
}

sub mksquashfs
{
	my ($cmd,$dir,$dest) = @_;
	$cmd = $cmd // "mksquashfs";
	$dir = $dir // "chroot";
	$dest = $dest // "image/live/filesystem.squashfs";

	print "Creating $dest from \[$dir\]... \n";
	print "$dest created.\n" unless system $cmd,$dir,$dest;
}

sub prepare
{
	print "Preparing image for ISO building...\n";
	`cp needed/isolinux/* image/isolinux/`;
}

sub geniso
{
	print "Creating bootable ISO ...\n";
	my @cmd = ($#_ > 0)? @_ : @xorriso;
	system @cmd;
}

#my $ans = prompt "Hi",$noyes;
#print "\[$ans\]";

#for(1..10){show_progress(0,100,$_*10,"Syncing /dev ...");sleep 1;}
intro;
die "Must br root to use this app!" if $>;
create_dir($workdirs) if prompt("Create necessary directories ?",$yesno);
#create_dir($workdirs);
sync if prompt("Sync temporary filesystem with your running OS ?",$yesno);
#sync;
conf_chroot if prompt("Configure chroot(skip if already done) ?",$yesno);
#conf_chroot;
mksquashfs if prompt("Create live filesystem ?",$yesno);
#mksquashfs;
prepare;
geniso if prompt("Create live ISO ?",$yesno);
#geniso;
